setwd("C:/Users/Yago/Desktop/TEEC/Trabalho Tópicos")
library("RSNNS")
#usada para gerar matrix de confusao
library("SDMTools")
dados <- read.csv(file = "classificado3.csv",sep = ",")
N <- dim(dados)[1]
indElementosEmbaralhados <- sample(N)
x <- data.frame(dados[,1],dados[,2],dados[,3],dados[,4],dados[5])
for(i in 1:N){
x[i,] <- dados[indElementosEmbaralhados[i],]
}
treinamentoX <- x[1:81,2:4]#60% da amostra
treinamentoY <- x[1:81,5]#60% da amostra
primeiraClassificacaoX <- x[82:135,2:4]
primeiraClassificacaoY <- x[82:135,5]
#configuracoes da MLP
nNeuronios = 12
maxEpocas <- 20000
#treinamento da MLP com 60% da amostra
redeCA <- NULL
#Backpropagation
print("treinando a rede na serie ajustada...")
redeCA<-mlp(treinamentoX, treinamentoY, size=nNeuronios, maxit=maxEpocas, initFunc="Randomize_Weights",
initFuncParams=c(-0.3, 0.3), learnFunc="Std_Backpropagation",
learnFuncParams=c(0.1), updateFunc="Topological_Order",
updateFuncParams=c(0), hiddenActFunc="Act_Logistic",
shufflePatterns=F, linOut=TRUE)
#PLOT DO ERRO
plot(redeCA$IterativeFitError,type="l",main="Erro da MLP CA")
library("RSNNS")
#usada para gerar matrix de confusao
library("SDMTools")
dados <- read.csv(file = "classificado3.csv",sep = ",")
N <- dim(dados)[1]
indElementosEmbaralhados <- sample(N)
x <- data.frame(dados[,1],dados[,2],dados[,3],dados[,4],dados[5])
for(i in 1:N){
x[i,] <- dados[indElementosEmbaralhados[i],]
}
treinamentoX <- x[1:81,2:4]#60% da amostra
treinamentoY <- x[1:81,5]#60% da amostra
primeiraClassificacaoX <- x[82:135,2:4]
primeiraClassificacaoY <- x[82:135,5]
#configuracoes da MLP
nNeuronios = 12
maxEpocas <- 20000
#treinamento da MLP com 60% da amostra
redeCA <- NULL
#Backpropagation
print("treinando a rede na serie ajustada...")
redeCA<-mlp(treinamentoX, treinamentoY, size=nNeuronios, maxit=maxEpocas, initFunc="Randomize_Weights",
initFuncParams=c(-0.3, 0.3), learnFunc="Std_Backpropagation",
learnFuncParams=c(0.1), updateFunc="Topological_Order",
updateFuncParams=c(0), hiddenActFunc="Act_Logistic",
shufflePatterns=F, linOut=TRUE)
#PLOT DO ERRO
plot(redeCA$IterativeFitError,type="l",main="Erro da MLP CA")
library("RSNNS")
#usada para gerar matrix de confusao
library("SDMTools")
dados <- read.csv(file = "classificado3.csv",sep = ",")
N <- dim(dados)[1]
indElementosEmbaralhados <- sample(N)
x <- data.frame(dados[,1],dados[,2],dados[,3],dados[,4],dados[5])
for(i in 1:N){
x[i,] <- dados[indElementosEmbaralhados[i],]
}
treinamentoX <- x[1:81,2:4]#60% da amostra
treinamentoY <- x[1:81,5]#60% da amostra
primeiraClassificacaoX <- x[82:135,2:4]
primeiraClassificacaoY <- x[82:135,5]
#configuracoes da MLP
nNeuronios = 12
maxEpocas <- 20000
#treinamento da MLP com 60% da amostra
redeCA <- NULL
#Backpropagation
print("treinando a rede na serie ajustada...")
redeCA<-mlp(treinamentoX, treinamentoY, size=nNeuronios, maxit=maxEpocas, initFunc="Randomize_Weights",
initFuncParams=c(-0.3, 0.3), learnFunc="Std_Backpropagation",
learnFuncParams=c(0.1), updateFunc="Topological_Order",
updateFuncParams=c(0), hiddenActFunc="Act_Logistic",
shufflePatterns=F, linOut=TRUE)
#PLOT DO ERRO
plot(redeCA$IterativeFitError,type="l",main="Erro da MLP CA")
library("RSNNS")
#usada para gerar matrix de confusao
library("SDMTools")
dados <- read.csv(file = "classificado3.csv",sep = ",")
N <- dim(dados)[1]
indElementosEmbaralhados <- sample(N)
x <- data.frame(dados[,1],dados[,2],dados[,3],dados[,4],dados[5])
for(i in 1:N){
x[i,] <- dados[indElementosEmbaralhados[i],]
}
treinamentoX <- x[1:81,2:4]#60% da amostra
treinamentoY <- x[1:81,5]#60% da amostra
primeiraClassificacaoX <- x[82:135,2:4]
primeiraClassificacaoY <- x[82:135,5]
#configuracoes da MLP
nNeuronios = 12
maxEpocas <- 20000
#treinamento da MLP com 60% da amostra
redeCA <- NULL
#Backpropagation
print("treinando a rede na serie ajustada...")
redeCA<-mlp(treinamentoX, treinamentoY, size=nNeuronios, maxit=maxEpocas, initFunc="Randomize_Weights",
initFuncParams=c(-0.3, 0.3), learnFunc="Std_Backpropagation",
learnFuncParams=c(0.1), updateFunc="Topological_Order",
updateFuncParams=c(0), hiddenActFunc="Act_Logistic",
shufflePatterns=F, linOut=TRUE)
#PLOT DO ERRO
plot(redeCA$IterativeFitError,type="l",main="Erro da MLP CA")
library("RSNNS")
#usada para gerar matrix de confusao
library("SDMTools")
dados <- read.csv(file = "classificado3.csv",sep = ",")
N <- dim(dados)[1]
indElementosEmbaralhados <- sample(N)
x <- data.frame(dados[,1],dados[,2],dados[,3],dados[,4],dados[5])
for(i in 1:N){
x[i,] <- dados[indElementosEmbaralhados[i],]
}
treinamentoX <- x[1:81,2:4]#60% da amostra
treinamentoY <- x[1:81,5]#60% da amostra
primeiraClassificacaoX <- x[82:135,2:4]
primeiraClassificacaoY <- x[82:135,5]
#configuracoes da MLP
nNeuronios = 12
maxEpocas <- 20000
#treinamento da MLP com 60% da amostra
redeCA <- NULL
#Backpropagation
print("treinando a rede na serie ajustada...")
redeCA<-mlp(treinamentoX, treinamentoY, size=nNeuronios, maxit=maxEpocas, initFunc="Randomize_Weights",
initFuncParams=c(-0.3, 0.3), learnFunc="Std_Backpropagation",
learnFuncParams=c(0.1), updateFunc="Topological_Order",
updateFuncParams=c(0), hiddenActFunc="Act_Logistic",
shufflePatterns=F, linOut=TRUE)
#PLOT DO ERRO
plot(redeCA$IterativeFitError,type="l",main="Erro da MLP CA",xlab="Erro iteratio",ylab = "Número de épocas")
library("RSNNS")
#usada para gerar matrix de confusao
library("SDMTools")
dados <- read.csv(file = "classificado3.csv",sep = ",")
N <- dim(dados)[1]
indElementosEmbaralhados <- sample(N)
x <- data.frame(dados[,1],dados[,2],dados[,3],dados[,4],dados[5])
for(i in 1:N){
x[i,] <- dados[indElementosEmbaralhados[i],]
}
treinamentoX <- x[1:81,2:4]#60% da amostra
treinamentoY <- x[1:81,5]#60% da amostra
primeiraClassificacaoX <- x[82:135,2:4]
primeiraClassificacaoY <- x[82:135,5]
#configuracoes da MLP
nNeuronios = 12
maxEpocas <- 20000
#treinamento da MLP com 60% da amostra
redeCA <- NULL
#Backpropagation
print("treinando a rede na serie ajustada...")
redeCA<-mlp(treinamentoX, treinamentoY, size=nNeuronios, maxit=maxEpocas, initFunc="Randomize_Weights",
initFuncParams=c(-0.3, 0.3), learnFunc="Std_Backpropagation",
learnFuncParams=c(0.1), updateFunc="Topological_Order",
updateFuncParams=c(0), hiddenActFunc="Act_Logistic",
shufflePatterns=F, linOut=TRUE)
#PLOT DO ERRO
plot(redeCA$IterativeFitError,type="l",main="Erro da MLP CA",xlab="Número de épocas",ylab = "Erro iterativo")
